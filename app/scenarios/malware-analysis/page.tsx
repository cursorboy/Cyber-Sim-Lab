"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import Link from "next/link"
import { ArrowLeft, CheckCircle, Clock, HelpCircle, Search, Terminal } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { toast } from "@/hooks/use-toast"

export default function MalwareAnalysisScenario() {
  const [currentStep, setCurrentStep] = useState(1)
  const [progress, setProgress] = useState(0)
  const [simulationActive, setSimulationActive] = useState(false)
  const [terminalInput, setTerminalInput] = useState("")
  const [terminalHistory, setTerminalHistory] = useState<string[]>([
    "Welcome to CyberDefender Malware Analysis Terminal",
    "Type 'help' to see available commands",
  ])
  const [commandHistory, setCommandHistory] = useState<string[]>([])
  const [historyIndex, setHistoryIndex] = useState(-1)
  const [detectedThreats, setDetectedThreats] = useState(0)
  const [completedTasks, setCompletedTasks] = useState<string[]>([])

  const terminalRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  const totalSteps = 5

  const files = {
    "/home/analyst": ["documents", "downloads", "suspicious"],
    "/home/analyst/documents": ["report.docx", "meeting_notes.txt"],
    "/home/analyst/downloads": ["setup.exe", "update.zip", "invoice.pdf"],
    "/home/analyst/suspicious": ["unknown_binary", "encrypted.bin", "hidden.dll"],
    "/var/log": ["system.log", "security.log", "malware_scan.log"],
  }

  const malwareSignatures = {
    "setup.exe": {
      isMalicious: true,
      type: "Trojan",
      risk: "High",
      details: "Contains code to establish persistence and disable security features",
      md5: "e8f2c09b238ca1f8708e9b54f6c2a839",
    },
    "update.zip": {
      isMalicious: true,
      type: "Ransomware",
      risk: "Critical",
      details: "Contains encryption routines and ransom note template",
      md5: "a7f92c53d36e6a94d9b3f0e9bcd8d372",
    },
    unknown_binary: {
      isMalicious: true,
      type: "Rootkit",
      risk: "Critical",
      details: "Attempts to modify system boot process and hide files",
      md5: "c5e19f3056a0bd9e29167a5e9c079aa0",
    },
    "hidden.dll": {
      isMalicious: true,
      type: "Backdoor",
      risk: "High",
      details: "Creates persistent connection to command and control server",
      md5: "f8a7b92c3e6a94d9b3f0e9bcd8d372a7",
    },
  }

  const [currentDirectory, setCurrentDirectory] = useState("/home/analyst")

  const tasks = [
    "Scan the system for malware",
    "Analyze suspicious files",
    "Identify at least 3 malicious files",
    "Quarantine infected files",
    "Generate a malware analysis report",
  ]

  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight
    }
  }, [terminalHistory])

  useEffect(() => {
    if (simulationActive && inputRef.current) {
      inputRef.current.focus()
    }
  }, [simulationActive])

  const startSimulation = () => {
    setSimulationActive(true)
    addTerminalLine("System initialized. Starting malware analysis environment...")
    addTerminalLine("Loading analysis tools...")
    addTerminalLine("Environment ready. You can now begin your investigation.")

    toast({
      title: "Simulation Started",
      description: "Use terminal commands to analyze and neutralize malware threats.",
      duration: 3000,
    })
  }

  const addTerminalLine = (line: string) => {
    setTerminalHistory((prev) => [...prev, line])
  }

  const handleTerminalInput = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter" && terminalInput.trim()) {
      const command = terminalInput.trim()
      processCommand(command)
      setCommandHistory((prev) => [...prev, command])
      setHistoryIndex(-1)
      setTerminalInput("")
    } else if (e.key === "ArrowUp") {
      e.preventDefault()
      if (commandHistory.length > 0) {
        const newIndex = historyIndex < commandHistory.length - 1 ? historyIndex + 1 : historyIndex
        setHistoryIndex(newIndex)
        setTerminalInput(commandHistory[commandHistory.length - 1 - newIndex] || "")
      }
    } else if (e.key === "ArrowDown") {
      e.preventDefault()
      if (historyIndex > 0) {
        const newIndex = historyIndex - 1
        setHistoryIndex(newIndex)
        setTerminalInput(commandHistory[commandHistory.length - 1 - newIndex] || "")
      } else if (historyIndex === 0) {
        setHistoryIndex(-1)
        setTerminalInput("")
      }
    } else if (e.key === "Tab") {
      e.preventDefault()
      handleTabCompletion()
    }
  }

  const handleTabCompletion = () => {
    const args = terminalInput.split(" ")
    const lastArg = args[args.length - 1]

    if (args[0] === "cd" || args[0] === "ls" || args[0] === "scan" || args[0] === "analyze") {
      // Get possible completions based on current directory
      const currentDirContents = files[currentDirectory as keyof typeof files] || []
      const possibleCompletions = currentDirContents.filter((item) => item.startsWith(lastArg))

      if (possibleCompletions.length === 1) {
        // Complete with the only match
        args[args.length - 1] = possibleCompletions[0]
        setTerminalInput(args.join(" "))
      } else if (possibleCompletions.length > 1) {
        // Show possible completions
        addTerminalLine(`$ ${terminalInput}`)
        addTerminalLine(`Possible completions: ${possibleCompletions.join("  ")}`)
      }
    }
  }

  const processCommand = (command: string) => {
    addTerminalLine(`$ ${command}`)

    const args = command.split(" ")
    const cmd = args[0].toLowerCase()

    switch (cmd) {
      case "help":
        showHelp()
        break
      case "ls":
        listDirectory(args[1])
        break
      case "cd":
        changeDirectory(args[1])
        break
      case "pwd":
        addTerminalLine(currentDirectory)
        break
      case "scan":
        scanFile(args[1])
        break
      case "analyze":
        analyzeFile(args[1])
        break
      case "quarantine":
        quarantineFile(args[1])
        break
      case "report":
        generateReport()
        break
      case "clear":
        setTerminalHistory([])
        break
      case "tasks":
        showTasks()
        break
      case "cat":
        catFile(args[1])
        break
      case "md5sum":
        calculateMd5(args[1])
        break
      default:
        addTerminalLine(`Command not found: ${cmd}. Type 'help' for available commands.`)
    }
  }

  const showHelp = () => {
    addTerminalLine("Available commands:")
    addTerminalLine("  help                - Show this help message")
    addTerminalLine("  ls [directory]      - List files in current or specified directory")
    addTerminalLine("  cd [directory]      - Change to specified directory")
    addTerminalLine("  pwd                 - Print current working directory")
    addTerminalLine("  scan [file/directory] - Scan file or directory for malware")
    addTerminalLine("  analyze [file]      - Perform detailed analysis on a file")
    addTerminalLine("  quarantine [file]   - Move file to quarantine")
    addTerminalLine("  cat [file]          - Display file contents")
    addTerminalLine("  md5sum [file]       - Calculate MD5 hash of file")
    addTerminalLine("  report              - Generate malware analysis report")
    addTerminalLine("  tasks               - Show current tasks")
    addTerminalLine("  clear               - Clear terminal")
  }

  const listDirectory = (dir?: string) => {
    const targetDir = dir ? (dir.startsWith("/") ? dir : `${currentDirectory}/${dir}`) : currentDirectory

    // Normalize path (handle ../ and ./)
    const normalizedPath = normalizePath(targetDir)

    if (files[normalizedPath as keyof typeof files]) {
      addTerminalLine("Contents of " + normalizedPath + ":")
      files[normalizedPath as keyof typeof files].forEach((file) => {
        addTerminalLine(`  ${file}`)
      })
    } else {
      addTerminalLine(`ls: cannot access '${dir}': No such file or directory`)
    }
  }

  const changeDirectory = (dir?: string) => {
    if (!dir) {
      setCurrentDirectory("/home/analyst")
      addTerminalLine("Changed to /home/analyst")
      return
    }

    let newDir
    if (dir.startsWith("/")) {
      newDir = dir
    } else if (dir === "..") {
      const parts = currentDirectory.split("/")
      parts.pop()
      newDir = parts.join("/") || "/"
    } else {
      newDir = `${currentDirectory}/${dir}`
    }

    // Normalize path
    newDir = normalizePath(newDir)

    if (files[newDir as keyof typeof files] || newDir === "/") {
      setCurrentDirectory(newDir)
      addTerminalLine(`Changed to ${newDir}`)
    } else {
      addTerminalLine(`cd: no such directory: ${dir}`)
    }
  }

  const normalizePath = (path: string): string => {
    // Handle . and ..
    const parts = path.split("/").filter(Boolean)
    const result = []

    for (const part of parts) {
      if (part === ".") continue
      if (part === "..") {
        result.pop()
      } else {
        result.push(part)
      }
    }

    return "/" + result.join("/")
  }

  const scanFile = (target?: string) => {
    if (!target) {
      addTerminalLine("Usage: scan [file/directory]")
      return
    }

    const targetPath = target.startsWith("/") ? target : `${currentDirectory}/${target}`
    const normalizedPath = normalizePath(targetPath)

    // Check if it's a directory
    if (files[normalizedPath as keyof typeof files]) {
      addTerminalLine(`Scanning directory: ${normalizedPath}`)
      addTerminalLine("Scanning...")

      setTimeout(() => {
        let foundThreats = 0
        const dirContents = files[normalizedPath as keyof typeof files]

        dirContents.forEach((file) => {
          const filePath = `${normalizedPath}/${file}`
          const fileName = file

          if (malwareSignatures[fileName as keyof typeof malwareSignatures]) {
            foundThreats++
            addTerminalLine(`[!] ALERT: Potential malware detected: ${filePath}`)
          }
        })

        if (foundThreats > 0) {
          addTerminalLine(`Scan complete. Found ${foundThreats} potential threats.`)
          if (!completedTasks.includes("Scan the system for malware")) {
            setCompletedTasks((prev) => [...prev, "Scan the system for malware"])
            toast({
              title: "Task Completed",
              description: "You've successfully scanned the system for malware.",
              duration: 3000,
            })
          }
        } else {
          addTerminalLine("Scan complete. No threats detected.")
        }
      }, 2000)

      return
    }

    // Check if it's a file
    const dirPath = normalizedPath.substring(0, normalizedPath.lastIndexOf("/"))
    const fileName = normalizedPath.substring(normalizedPath.lastIndexOf("/") + 1)

    if (files[dirPath as keyof typeof files]?.includes(fileName)) {
      addTerminalLine(`Scanning file: ${normalizedPath}`)
      addTerminalLine("Scanning...")

      setTimeout(() => {
        if (malwareSignatures[fileName as keyof typeof malwareSignatures]) {
          const malware = malwareSignatures[fileName as keyof typeof malwareSignatures]
          addTerminalLine(`[!] ALERT: Malware detected in ${normalizedPath}`)
          addTerminalLine(`Type: ${malware.type}`)
          addTerminalLine(`Risk Level: ${malware.risk}`)

          setDetectedThreats((prev) => prev + 1)

          if (!completedTasks.includes("Scan the system for malware")) {
            setCompletedTasks((prev) => [...prev, "Scan the system for malware"])
            toast({
              title: "Task Completed",
              description: "You've successfully scanned the system for malware.",
              duration: 3000,
            })
          }
        } else {
          addTerminalLine(`Scan complete. No threats detected in ${normalizedPath}.`)
        }
      }, 1500)
    } else {
      addTerminalLine(`scan: cannot access '${target}': No such file or directory`)
    }
  }

  const analyzeFile = (file?: string) => {
    if (!file) {
      addTerminalLine("Usage: analyze [file]")
      return
    }

    const filePath = file.startsWith("/") ? file : `${currentDirectory}/${file}`
    const normalizedPath = normalizePath(filePath)
    const dirPath = normalizedPath.substring(0, normalizedPath.lastIndexOf("/"))
    const fileName = normalizedPath.substring(normalizedPath.lastIndexOf("/") + 1)

    if (files[dirPath as keyof typeof files]?.includes(fileName)) {
      addTerminalLine(`Analyzing file: ${normalizedPath}`)
      addTerminalLine("Performing deep analysis...")

      setTimeout(() => {
        if (malwareSignatures[fileName as keyof typeof malwareSignatures]) {
          const malware = malwareSignatures[fileName as keyof typeof malwareSignatures]
          addTerminalLine("=== Analysis Results ===")
          addTerminalLine(`File: ${normalizedPath}`)
          addTerminalLine(`MD5 Hash: ${malware.md5}`)
          addTerminalLine(`Status: MALICIOUS`)
          addTerminalLine(`Malware Type: ${malware.type}`)
          addTerminalLine(`Risk Level: ${malware.risk}`)
          addTerminalLine(`Details: ${malware.details}`)
          addTerminalLine("======================")

          if (!completedTasks.includes("Analyze suspicious files")) {
            setCompletedTasks((prev) => [...prev, "Analyze suspicious files"])
            toast({
              title: "Task Completed",
              description: "You've successfully analyzed suspicious files.",
              duration: 3000,
            })
          }

          // Check if we've identified 3 malicious files
          if (detectedThreats >= 2 && !completedTasks.includes("Identify at least 3 malicious files")) {
            setCompletedTasks((prev) => [...prev, "Identify at least 3 malicious files"])
            toast({
              title: "Task Completed",
              description: "You've identified at least 3 malicious files.",
              duration: 3000,
            })
          }
        } else {
          addTerminalLine("=== Analysis Results ===")
          addTerminalLine(`File: ${normalizedPath}`)
          addTerminalLine(`Status: CLEAN`)
          addTerminalLine(`No malicious indicators detected.`)
          addTerminalLine("======================")
        }
      }, 2000)
    } else {
      addTerminalLine(`analyze: cannot access '${file}': No such file or directory`)
    }
  }

  const quarantineFile = (file?: string) => {
    if (!file) {
      addTerminalLine("Usage: quarantine [file]")
      return
    }

    const filePath = file.startsWith("/") ? file : `${currentDirectory}/${file}`
    const normalizedPath = normalizePath(filePath)
    const dirPath = normalizedPath.substring(0, normalizedPath.lastIndexOf("/"))
    const fileName = normalizedPath.substring(normalizedPath.lastIndexOf("/") + 1)

    if (files[dirPath as keyof typeof files]?.includes(fileName)) {
      if (malwareSignatures[fileName as keyof typeof malwareSignatures]) {
        addTerminalLine(`Quarantining file: ${normalizedPath}`)
        addTerminalLine("Moving to secure quarantine location...")

        setTimeout(() => {
          addTerminalLine(`File ${normalizedPath} has been successfully quarantined.`)

          // Remove the file from its original location
          const dirFiles = files[dirPath as keyof typeof files] || []
          const updatedFiles = dirFiles.filter((f) => f !== fileName)
          files[dirPath as keyof typeof files] = updatedFiles

          if (!completedTasks.includes("Quarantine infected files")) {
            setCompletedTasks((prev) => [...prev, "Quarantine infected files"])
            toast({
              title: "Task Completed",
              description: "You've successfully quarantined infected files.",
              duration: 3000,
            })
          }
        }, 1500)
      } else {
        addTerminalLine(`File ${normalizedPath} is not malicious. Quarantine not necessary.`)
      }
    } else {
      addTerminalLine(`quarantine: cannot access '${file}': No such file or directory`)
    }
  }

  const generateReport = () => {
    addTerminalLine("Generating malware analysis report...")

    setTimeout(() => {
      addTerminalLine("=== MALWARE ANALYSIS REPORT ===")
      addTerminalLine(`Date: ${new Date().toISOString().split("T")[0]}`)
      addTerminalLine(`Time: ${new Date().toTimeString().split(" ")[0]}`)
      addTerminalLine(`Analyst: Security Trainee`)
      addTerminalLine(`Total files scanned: ${Object.values(files).flat().length}`)
      addTerminalLine(`Malicious files detected: ${detectedThreats}`)
      addTerminalLine("")
      addTerminalLine("Detected Threats:")

      Object.entries(malwareSignatures).forEach(([file, info]) => {
        addTerminalLine(`- ${file} (${info.type}, Risk: ${info.risk})`)
      })

      addTerminalLine("")
      addTerminalLine("Recommendations:")
      addTerminalLine("1. Continue monitoring system for suspicious activity")
      addTerminalLine("2. Update antivirus definitions")
      addTerminalLine("3. Scan all downloaded files before execution")
      addTerminalLine("4. Implement application whitelisting")
      addTerminalLine("===============================")

      if (!completedTasks.includes("Generate a malware analysis report")) {
        setCompletedTasks((prev) => [...prev, "Generate a malware analysis report"])
        toast({
          title: "Task Completed",
          description: "You've successfully generated a malware analysis report.",
          duration: 3000,
        })
      }

      // Check if all tasks are completed
      if (completedTasks.length >= 4) {
        toast({
          title: "Scenario Completed!",
          description: "You've successfully completed all required tasks.",
          duration: 5000,
        })
      }
    }, 2000)
  }

  const catFile = (file?: string) => {
    if (!file) {
      addTerminalLine("Usage: cat [file]")
      return
    }

    const filePath = file.startsWith("/") ? file : `${currentDirectory}/${file}`
    const normalizedPath = normalizePath(filePath)
    const dirPath = normalizedPath.substring(0, normalizedPath.lastIndexOf("/"))
    const fileName = normalizedPath.substring(normalizedPath.lastIndexOf("/") + 1)

    if (files[dirPath as keyof typeof files]?.includes(fileName)) {
      if (fileName === "meeting_notes.txt") {
        addTerminalLine("Meeting Notes - Security Team")
        addTerminalLine("Date: 2025-03-10")
        addTerminalLine("")
        addTerminalLine("1. Discussed recent security incidents")
        addTerminalLine("2. Need to investigate suspicious files in downloads folder")
        addTerminalLine("3. Update malware signatures database")
        addTerminalLine("4. Schedule security awareness training")
      } else if (fileName === "malware_scan.log") {
        addTerminalLine("# Malware Scan Log")
        addTerminalLine("# Date: 2025-03-15")
        addTerminalLine("")
        addTerminalLine("08:15:22 - Scan started")
        addTerminalLine("08:15:45 - Scanning system files...")
        addTerminalLine("08:17:30 - Scanning user directories...")
        addTerminalLine("08:18:12 - WARNING: Suspicious file detected in /home/analyst/downloads")
        addTerminalLine("08:19:05 - WARNING: Potential malware found in /home/analyst/suspicious")
        addTerminalLine("08:20:30 - Scan completed")
        addTerminalLine("08:20:31 - Total files scanned: 1,245")
        addTerminalLine("08:20:32 - Suspicious files: 2")
      } else if (
        fileName.endsWith(".exe") ||
        fileName.endsWith(".dll") ||
        fileName.endsWith(".bin") ||
        fileName === "unknown_binary"
      ) {
        addTerminalLine(`cat: ${fileName}: Cannot display binary file`)
      } else {
        addTerminalLine(`File contents of ${fileName} not available in this simulation.`)
      }
    } else {
      addTerminalLine(`cat: cannot access '${file}': No such file or directory`)
    }
  }

  const calculateMd5 = (file?: string) => {
    if (!file) {
      addTerminalLine("Usage: md5sum [file]")
      return
    }

    const filePath = file.startsWith("/") ? file : `${currentDirectory}/${file}`
    const normalizedPath = normalizePath(filePath)
    const dirPath = normalizedPath.substring(0, normalizedPath.lastIndexOf("/"))
    const fileName = normalizedPath.substring(normalizedPath.lastIndexOf("/") + 1)

    if (files[dirPath as keyof typeof files]?.includes(fileName)) {
      addTerminalLine("Calculating MD5 hash...")

      setTimeout(() => {
        if (malwareSignatures[fileName as keyof typeof malwareSignatures]) {
          const malware = malwareSignatures[fileName as keyof typeof malwareSignatures]
          addTerminalLine(`${malware.md5}  ${normalizedPath}`)
        } else {
          // Generate a random MD5-like hash for non-malicious files
          const randomHash = Array.from({ length: 32 }, () => Math.floor(Math.random() * 16).toString(16)).join("")
          addTerminalLine(`${randomHash}  ${normalizedPath}`)
        }
      }, 1000)
    } else {
      addTerminalLine(`md5sum: cannot access '${file}': No such file or directory`)
    }
  }

  const showTasks = () => {
    addTerminalLine("Current Tasks:")
    tasks.forEach((task, index) => {
      const completed = completedTasks.includes(task)
      addTerminalLine(`${index + 1}. [${completed ? "X" : " "}] ${task}`)
    })
    addTerminalLine(`Progress: ${completedTasks.length}/${tasks.length} tasks completed`)
  }

  const nextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1)
      setProgress((currentStep / totalSteps) * 100)
    }
  }

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
      setProgress(((currentStep - 2) / totalSteps) * 100)
    }
  }

  return (
    <div className="flex min-h-screen flex-col">
      <main className="flex-1 container py-8">
        <div className="flex items-center mb-8">
          <Link href="/scenarios">
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" /> Back to Scenarios
            </Button>
          </Link>
          <h1 className="text-3xl font-bold ml-4">Malware Analysis Scenario</h1>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <Card className="mb-6">
              <CardHeader>
                <div className="flex justify-between items-center">
                  <CardTitle>Interactive Terminal</CardTitle>
                  <div className="flex items-center gap-2">
                    <div className="text-sm text-muted-foreground flex items-center gap-1">
                      <Clock className="h-4 w-4" />
                      <span>30:00</span>
                    </div>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="ghost" size="icon">
                            <HelpCircle className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="max-w-xs">
                            Use terminal commands to analyze and neutralize malware threats. Type 'help' to see
                            available commands.
                          </p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                </div>
                <CardDescription>Identify and neutralize malicious software in a safe environment</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="bg-black rounded-md p-4 font-mono text-sm text-green-400 h-[400px] flex flex-col">
                  <div className="flex items-center gap-2 mb-4">
                    <Terminal className="h-5 w-5" />
                    <span className="text-white">CyberDefender Terminal</span>
                  </div>
                  <div className="flex-1 overflow-auto mb-2" ref={terminalRef}>
                    {terminalHistory.map((line, index) => (
                      <div key={index} className="py-0.5 break-words whitespace-pre-wrap">
                        {line}
                      </div>
                    ))}
                  </div>
                  <div className="flex items-center">
                    <span className="mr-2">{currentDirectory} $</span>
                    <input
                      ref={inputRef}
                      type="text"
                      value={terminalInput}
                      onChange={(e) => setTerminalInput(e.target.value)}
                      onKeyDown={handleTerminalInput}
                      className="flex-1 bg-transparent outline-none"
                      disabled={!simulationActive}
                    />
                  </div>
                </div>
                <div className="mt-4 grid grid-cols-2 md:grid-cols-4 gap-2">
                  <Button
                    size="sm"
                    variant="outline"
                    className="text-xs"
                    onClick={() => processCommand("ls")}
                    disabled={!simulationActive}
                  >
                    ls
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    className="text-xs"
                    onClick={() => processCommand("scan .")}
                    disabled={!simulationActive}
                  >
                    scan .
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    className="text-xs"
                    onClick={() => processCommand("help")}
                    disabled={!simulationActive}
                  >
                    help
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    className="text-xs"
                    onClick={() => processCommand("tasks")}
                    disabled={!simulationActive}
                  >
                    tasks
                  </Button>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <div className="flex gap-2">
                  <Button onClick={startSimulation} disabled={simulationActive}>
                    Start Simulation
                  </Button>
                  <Button
                    variant="outline"
                    className="gap-1"
                    disabled={!simulationActive}
                    onClick={() => {
                      setTerminalHistory([
                        "Welcome to CyberDefender Malware Analysis Terminal",
                        "Type 'help' to see available commands",
                      ])
                      setCurrentDirectory("/home/analyst")
                      setDetectedThreats(0)
                      setCompletedTasks([])
                      setSimulationActive(false)
                      toast({
                        title: "Simulation Reset",
                        description: "The simulation has been reset.",
                        duration: 3000,
                      })
                    }}
                  >
                    <Search className="h-4 w-4" />
                    Reset
                  </Button>
                </div>
                <div className="text-sm">
                  Tasks Completed:{" "}
                  <span className="font-bold">
                    {completedTasks.length}/{tasks.length}
                  </span>
                </div>
              </CardFooter>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>
                  Step {currentStep} of {totalSteps}:{" "}
                  {["Introduction", "Scanning", "Analysis", "Remediation", "Prevention"][currentStep - 1]}
                </CardTitle>
                <CardDescription>Progress: {Math.round(progress)}%</CardDescription>
                <Progress value={progress} className="h-2" />
              </CardHeader>
              <CardContent>
                {currentStep === 1 && (
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">Welcome to the Malware Analysis Scenario</h3>
                    <p>
                      In this simulation, you will learn how to identify, analyze, and neutralize malicious software.
                      You will be presented with a virtual environment where you can use terminal commands to scan
                      files, analyze potential threats, and take appropriate actions to protect the system.
                    </p>
                    <p>
                      This scenario will guide you through the process of identifying infected files and safely
                      quarantining them to prevent damage to the system.
                    </p>
                    <div className="bg-muted p-4 rounded-md">
                      <h4 className="font-medium mb-2">Getting Started:</h4>
                      <ol className="list-decimal pl-5 space-y-1">
                        <li>Click "Start Simulation" to begin</li>
                        <li>Type "help" to see available commands</li>
                        <li>Type "tasks" to see your objectives</li>
                        <li>Use "ls" to list files and "cd" to navigate directories</li>
                        <li>Use "scan" to check files for malware</li>
                      </ol>
                    </div>
                  </div>
                )}
                {currentStep === 2 && (
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">Scanning Phase</h3>
                    <p>
                      Start by scanning the system for potential threats. Malware scanners look for known signatures,
                      suspicious behaviors, and anomalies that might indicate the presence of malicious software.
                    </p>
                    <div className="bg-muted p-4 rounded-md">
                      <h4 className="font-medium mb-2">Key Commands:</h4>
                      <ul className="list-disc pl-5 space-y-1">
                        <li>
                          <code>ls</code> - List files in current directory
                        </li>
                        <li>
                          <code>cd [directory]</code> - Change to specified directory
                        </li>
                        <li>
                          <code>scan [file/directory]</code> - Scan for malware
                        </li>
                        <li>
                          <code>scan .</code> - Scan current directory
                        </li>
                      </ul>
                    </div>
                    <p>
                      Try exploring different directories and scanning files to identify potential threats. Pay special
                      attention to the "downloads" and "suspicious" directories.
                    </p>
                  </div>
                )}
                {currentStep === 3 && (
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">Analysis Phase</h3>
                    <p>
                      Once you've identified suspicious files, it's time to analyze them in detail to understand the
                      nature of the threat.
                    </p>
                    <div className="bg-muted p-4 rounded-md">
                      <h4 className="font-medium mb-2">Key Commands:</h4>
                      <ul className="list-disc pl-5 space-y-1">
                        <li>
                          <code>analyze [file]</code> - Perform detailed analysis on a file
                        </li>
                        <li>
                          <code>md5sum [file]</code> - Calculate MD5 hash of file
                        </li>
                        <li>
                          <code>cat [file]</code> - Display file contents (if text)
                        </li>
                      </ul>
                    </div>
                    <p>
                      Analyze suspicious files to determine their malware type, risk level, and potential impact. Look
                      for patterns across different malicious files to understand the attack strategy.
                    </p>
                  </div>
                )}
                {currentStep === 4 && (
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">Remediation Phase</h3>
                    <p>After identifying malicious files, it's time to take action to neutralize the threats.</p>
                    <div className="bg-muted p-4 rounded-md">
                      <h4 className="font-medium mb-2">Key Commands:</h4>
                      <ul className="list-disc pl-5 space-y-1">
                        <li>
                          <code>quarantine [file]</code> - Move file to secure quarantine
                        </li>
                        <li>
                          <code>report</code> - Generate malware analysis report
                        </li>
                      </ul>
                    </div>
                    <p>
                      Quarantine all identified malicious files to prevent them from causing harm. After addressing all
                      threats, generate a report to document your findings and actions.
                    </p>
                  </div>
                )}
                {currentStep === 5 && (
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">Prevention Phase</h3>
                    <p>
                      Great job! You've successfully identified and neutralized the malware threats. Let's discuss
                      prevention strategies to avoid future infections:
                    </p>
                    <ul className="list-disc pl-6 space-y-2">
                      <li>Keep all software and operating systems up to date</li>
                      <li>Use reputable antivirus and anti-malware software</li>
                      <li>Be cautious when downloading files or clicking on links</li>
                      <li>Verify the source of software before installing</li>
                      <li>Regularly back up important data</li>
                      <li>Use strong, unique passwords and enable two-factor authentication</li>
                      <li>Implement application whitelisting and least privilege principles</li>
                      <li>Conduct regular security scans and audits</li>
                    </ul>
                  </div>
                )}
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button onClick={prevStep} disabled={currentStep === 1} variant="outline">
                  Previous
                </Button>
                <Button onClick={nextStep} disabled={currentStep === totalSteps}>
                  Next
                </Button>
              </CardFooter>
            </Card>
          </div>

          <div>
            <Card className="mb-6">
              <CardHeader>
                <CardTitle>Scenario Details</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">Difficulty:</span>
                    <span className="bg-primary/10 text-primary text-xs font-medium px-2 py-1 rounded-full">
                      Beginner
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">Estimated Time:</span>
                    <span className="text-sm">30-45 minutes</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">Category:</span>
                    <span className="text-sm">Malware Analysis</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">Skills:</span>
                    <div className="flex flex-wrap gap-1 justify-end">
                      <span className="bg-muted text-xs px-2 py-1 rounded-full">Scanning</span>
                      <span className="bg-muted text-xs px-2 py-1 rounded-full">Analysis</span>
                      <span className="bg-muted text-xs px-2 py-1 rounded-full">Remediation</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="mb-6">
              <CardHeader>
                <CardTitle>Tasks</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {tasks.map((task, index) => (
                    <li key={index} className="flex items-start gap-2">
                      {completedTasks.includes(task) ? (
                        <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 shrink-0" />
                      ) : (
                        <div className="h-5 w-5 border rounded-full mt-0.5 shrink-0" />
                      )}
                      <span className={completedTasks.includes(task) ? "text-green-500" : ""}>{task}</span>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Learning Objectives</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  <li className="flex items-start gap-2">
                    <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 shrink-0" />
                    <span>Use command-line tools for malware analysis</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 shrink-0" />
                    <span>Identify malicious files based on signatures and behavior</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 shrink-0" />
                    <span>Analyze malware characteristics and risk levels</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 shrink-0" />
                    <span>Implement appropriate remediation strategies</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 shrink-0" />
                    <span>Document findings in a comprehensive security report</span>
                  </li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
      <footer className="border-t bg-muted/40">
        <div className="container py-6 text-center text-sm text-muted-foreground">
          © 2025 CyberDefender. All rights reserved.
        </div>
      </footer>
    </div>
  )
}

